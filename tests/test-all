#!/bin/bash
# Git apparently always sets the working directory to the root of the
# workspace, so using relative paths from there is fine.

# --------------------------------------------------------------------------
#                                                            configuration
# --------------------------------------------------------------------------

# Schema baselining has been removed for now.  It's untenable.  Leaving in
# here for now to be for sure for sure.
# # this needs to be set when the seed data is changed as this will break
# # schema upgrade testing.  This tag must be applied to the commit of the
# # changes or that of the seed data, whichever is latest.  Obviously upgrades
# # prior to the baseline are assumed to have been properly tested.
# SCHEMA_BASELINE=20201209

# --------------------------------------------------------------------------
#                                                            functions
# --------------------------------------------------------------------------

fail_to()
{
  2>&1 echo Unable to $@
  exit 1
}

warn_couldnt()
{
  2>&1 echo Unable to $@
}

# --------------------------------------------------------------------------
#                                                         argument parsing
# --------------------------------------------------------------------------

usage()
{
  cat <<EOF
Usage: $(basename $0) [options] [case ...]
Options:
  --no-sqlite:      Don't test SQLite (default to test SQLite)
  --pgsql:          Test Postgres
  --ldap:           Test LDAP integration
  --selenium:       Execute Selenium testing (default false)
  -a|--all:         Test all above if containers available
  --otrs:           Test OTRS integration.  Requires configuration file
                    tests/otrs.conf to exist (see sample)
  --no-cleanup:     Do not clean up temporary directories
  --upgrade:        Include schema upgrade testing for Postgres
  --no-linting:     Skip lint testing
  --no-unit:        Skip unit testing
  -x|--exitfirst:   [pytest] Exit at first failed test
  -v|--verbose:     [pytest] Show verbose information
  -d|--debug:       [pytest] Show debug-level logging
  --sw|--stepwise:  [pytest] Exit and resume at first failed test

Postgres, LDAP and Selenium testing can only be performed if an appropriate
container is running with the label 'postgres-beam', 'ldap-beam', or
'selenium-beam', respectively.

Schema upgrade testing is limited to Postgres.

OTRS testing *will create tickets and send e-mails*.  The tickets will be
automatically closed if successful, but e-mails will need to be verified
before cleanup.  OTRS testing is not included by `--all`.

Specific Pytest test cases may be specified following options.

EOF
}

# defaults
sqlite=1
pgsql=0
ldap=0
otrs=0
selenium=0
test_upgrade=0
linting=1
unit=1
exitfirst=0
verbose=0
debug=0
sqlite=1
cleanup=1
stepwise=0

# get arguments
while [ -n "$1" ]
do
  case "$1" in
    -a|--all)
      sqlite=1
      pgsql=1
      ldap=1
      selenium=1
      ;;
    --no-cleanup)
      cleanup=0
      ;;
    --upgrade)
      test_upgrade=1
      ;;
    --no-sqlite)
      sqlite=0
      ;;
    --pgsql)
      pgsql=1
      ;;
    --ldap)
      ldap=1
      ;;
    --otrs)
      otrs=1
      ;;
    --no-linting)
      linting=0
      ;;
    --no-unit)
      unit=0
      ;;
    --selenium)
      selenium=1
      ;;
    -d|--debug)
      debug=1
      ;;
    -v|--verbose)
      verbose=1
      ;;
    -x|--exitfirst)
      exitfirst=1
      ;;
    --sw|--stepwise)
      stepwise=1
      ;;
    -h|--help)
      usage
      exit
      ;;
    -*|--*)
      echo "Unrecognized option: $1"
      usage
      exit 1
      ;;
    *)
      tests="$tests $1"
      ;;
  esac
  shift
done

pytest_opts="--cov=manager --cov-report=term --cov-report=html"
if (( debug ))
then
  pytest_opts="$pytest_opts --log-level=debug"
fi
if (( verbose ))
then
  pytest_opts="$pytest_opts -v"
fi
if (( exitfirst ))
then
  pytest_opts="$pytest_opts -x"
fi
if (( stepwise ))
then
  pytest_opts="$pytest_opts --sw"
fi

# --------------------------------------------------------------------------
#                                                     actually doing stuff
# --------------------------------------------------------------------------

if (( test_upgrade ))
then
  # create temporary directory for this stuff
  tmpdir=$(mktemp -d /tmp/$(basename $0).XXXXXX) || fail_to create temporary directory
  if ! (( cleanup ))
  then
    echo "Temporary work dir (not cleaned up): $tmpdir"
  fi

  # get preliminary list of schema versions, and then winnow to supported
  # upgrades
  versions=$(git tag | awk -F- '$1 == "schema" { print $2 }' | sort)
  if [ -z "$versions" ]
  then
    test_upgrade=0
  else
    # grab base schema versions and create databases with them
    testable=()
    for version in $versions
    do
      if [ -e tests/data-${version}.sql ]
      then
        testable+=($version)
        git show schema-$version:manager/sql/schema.sql > $tmpdir/schema-$version.sql
        git show schema-$version:manager/sql/schema.psql > $tmpdir/schema-$version.psql
      fi
    done

    if [ -z "$testable" ]
    then
      test_upgrade=0
    else
      # setup pytest stuff
      export SCHEMA_BASEDIR=$tmpdir
      export SCHEMA_VERSIONS=$(echo ${testable[@]} | tr ' ' ',')
      echo "Schema versions: $SCHEMA_VERSIONS"
      echo "Schema basedir: $SCHEMA_BASEDIR"
    fi
  fi
  if ! (( test_upgrade ))
  then
    echo "WARNING: upgrade testing requested but cannot be performed.  Check that schema"
    echo "releases are properly tagged in Git, and that versioned seed scripts exists"
    echo "(i.e. tests/data-VERSION.sql)."
    exit 1
  fi
fi

if (( cleanup ))
then
  cleanup()
  {
    if (( test_upgrade ))
    then
      rm -Rf $tmpdir
    fi
  }
  trap cleanup EXIT
else
  echo "NOTE: Not cleaning up temporary data.  Location: $tmpdir"
fi

export PYTHONPATH=.:$PYTHONPATH

# linting
if (( linting ))
then
  tests/linting/test-all || exit 1
fi

# unit testing
unit_testing=""
if (( unit ))
then
  unit_testing="tests/test_unit.py"
fi

# test sqlite if desired
sqlite_testing=""
if (( sqlite ))
then
  sqlite_testing="tests/test_sqlite.py"
fi

# test pgsql if desired and container is running
pgsql_testing=""
pgctr=0
docker ps | grep -q postgres-beam && pgctr=1
if (( pgsql ))
then
  if (( pgctr ))
  then
    pgsql_testing="tests/test_pgsql.py"
  else
    warn_couldnt test Postgres
  fi
fi
if (( test_upgrade ))
then
  if (( pgctr ))
  then
    pgsql_testing="${pgsql_testing} tests/test_pgsql_upgrade.py"
  else
    warn_couldnt test Postgres upgrade
  fi
fi

# test LDAP if desired and container is running
ldap_testing=""
if (( ldap ))
then
  # test if LDAP container is running
  if docker ps | grep -q ldap-beam
  then
    ldap_testing="tests/test_integration.py"
  else
    warn_couldnt test LDAP
  fi
fi

# test OTRS if desired and LDAP container is running
otrs_testing=""
if (( otrs ))
then
  # test if LDAP container is running
  if docker ps | grep -q ldap-beam
  then
    otrs_testing="tests/test_otrs.py"
  else
    warn_couldnt test OTRS--LDAP container must be running
  fi
fi

# test Selenium if desired and container is running
selenium_testing=""
if (( selenium ))
then
  if docker ps | grep -q selenium-beam
  then
    env="$env BEAM_STATIC_RESOURCE_URI=http://resources:8080 SELENIUM_URL=0.0.0.0:4444/wd/hub"
    selenium_testing="tests/test_selenium.py"
  else
    warn_couldnt test Selenium
  fi
fi

# functional testing
emptypat='^ *$'
if [ -z "$tests" ]
then
  tests="$unit_testing $sqlite_testing $pgsql_testing $ldap_testing $otrs_testing $selenium_testing"
fi
if [[ "$tests" =~ $emptypat ]]
then
  fail_to test anything.
fi
sh -c "$env pytest $pytest_opts $tests || exit 1"
