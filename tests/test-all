#!/bin/bash
# Git apparently always sets the working directory to the root of the
# workspace, so using relative paths from there is fine.

# --------------------------------------------------------------------------
#                                                            configuration
# --------------------------------------------------------------------------

# Schema baselining has been removed for now.  It's untenable.  Leaving in
# here for now to be for sure for sure.
# # this needs to be set when the seed data is changed as this will break
# # schema upgrade testing.  This tag must be applied to the commit of the
# # changes or that of the seed data, whichever is latest.  Obviously upgrades
# # prior to the baseline are assumed to have been properly tested.
# SCHEMA_BASELINE=20201209

# --------------------------------------------------------------------------
#                                                            functions
# --------------------------------------------------------------------------

fail_to()
{
  2>&1 echo Unable to $@
  exit 1
}

warn_couldnt()
{
  2>&1 echo Unable to $@
}

# --------------------------------------------------------------------------
#                                                         argument parsing
# --------------------------------------------------------------------------

usage()
{
  cat <<EOF
Usage: $(basename $0) [options]
Options:
  --no-sqlite:    Don't test SQLite (default to test SQLite)
  --pgsql:        Test Postgres (default true if container running)
  --ldap:         Test LDAP integration (default true if container running)
  --selenium:     Execute Selenium testing (default false)
  -a|--all:       Test all above if containers available
  --no-cleanup:   Do not clean up temporary directories
  --schema:       Include schema upgrade testing
  --no-linting:   Skip lint testing
  -x|--exitfirst: [pytest] Exit at first failed test
  -v|--verbose:   [pytest] Show verbose information
  -d|--debug:     [pytest] Show debug-level logging

Postgres testing is performed by default if a Postgres container is running
with the label 'postgres-beam'.
EOF
}

# defaults
sqlite=1
pgsql=0
ldap=0
selenium=0
test_schema=0
linting=1
exitfirst=0
verbose=0
debug=0
sqlite=1
cleanup=1

# get arguments
while [ -n "$1" ]
do
  case "$1" in
    -a|--all)
      sqlite=1
      pgsql=1
      ldap=1
      selenium=1
      ;;
    --no-cleanup)
      cleanup=0
      ;;
    --schema)
      test_schema=1
      ;;
    --no-sqlite)
      sqlite=0
      ;;
    --pgsql)
      pgsql=1
      ;;
    --ldap)
      ldap=1
      ;;
    --no-linting)
      linting=0
      ;;
    --selenium)
      selenium=1
      ;;
    -d|--debug)
      debug=1
      ;;
    -v|--verbose)
      verbose=1
      ;;
    -x|--exitfirst)
      exitfirst=1
      ;;
    -h|--help)
      usage
      exit
      ;;
    *)
      echo "Unrecognized option: $1"
      usage
      exit 1
  esac
  shift
done

pytest_opts="--cov=manager --cov-report=term --cov-report=html"
if (( debug ))
then
  pytest_opts="$pytest_opts --log-level=debug"
fi
if (( verbose ))
then
  pytest_opts="$pytest_opts -v"
fi
if (( exitfirst ))
then
  pytest_opts="$pytest_opts -x"
fi

# --------------------------------------------------------------------------
#                                                     actually doing stuff
# --------------------------------------------------------------------------

if (( test_schema ))
then
  # create temporary directory for this stuff
  tmpdir=$(mktemp -d /tmp/$(basename $0).XXXXXX) || fail_to create temporary directory
  if ! (( cleanup ))
  then
    echo "Temporary work dir (not cleaned up): $tmpdir"
  fi

  # Schema baselining is disabled; see "configuration" section
  # # get schema versions from git after $SCHEMA_BASELINE (when seed data changed)
  # versions=$(git tag | awk -F- '$1 == "schema" && $2 >= '$SCHEMA_BASELINE' { print $2 }' | sort)
  versions=$(git tag | awk -F- '$1 == "schema" { print $2 }' | sort)
  if [ -z "$versions" ]
  then
    test_schema=0
  else
    # grab base schema versions and create databases with them
    for version in $versions
    do
      git show schema-$version:manager/sql/schema.sql > $tmpdir/schema-$version.sql
      git show schema-$version:manager/sql/schema.psql > $tmpdir/schema-$version.psql
      git show schema-$version:tests/data.sql > $tmpdir/seed-$version.sql
    done

    # setup pytest stuff
    export SCHEMA_BASEDIR=$tmpdir
    export SCHEMA_VERSIONS=$(echo $versions | tr ' ' ',') 
    echo "Schema versions: $SCHEMA_VERSIONS"
    echo "Schema basedir: $SCHEMA_BASEDIR"
  fi
fi

if (( cleanup ))
then
  cleanup()
  {
    if (( test_schema ))
    then
      rm -Rf $tmpdir
    fi
  }
  trap cleanup EXIT
fi

export PYTHONPATH=.:$PYTHONPATH

# linting
if (( linting ))
then
  tests/linting/test-all || exit 1
fi

# test sqlite if desired
sqlite_testing=""
if (( sqlite ))
then
  sqlite_testing="tests/test_sqlite.py"
  if (( test_schema ))
  then
    sqlite_testing="${sqlite_testing} tests/test_sqlite_upgrade.py"
  fi
fi

# test pgsql if desired and container is running
pgsql_testing=""
if (( pgsql ))
then
  ldap_testing=""
  if docker ps | grep -q postgres-beam
  then
    pgsql_testing="tests/test_pgsql.py"
    if (( test_schema ))
    then
      pgsql_testing="${pgsql_testing} tests/test_pgsql_upgrade.py"
    fi
  else
    warn_couldnt test Postgres
  fi
fi

# test LDAP if desired and container is running
ldap_testing=""
if (( ldap ))
then
  # test if LDAP container is running
  if docker ps | grep -q ldap-beam
  then
    ldap_testing="tests/test_integration.py"
  else
    warn_couldnt test LDAP
  fi
fi

# test Selenium if desired and container is running
selenium_testing=""
if (( selenium ))
then
  if docker ps | grep -q selenium-beam
  then
    env="$env BEAM_STATIC_RESOURCE_URI=http://resources:8080 SELENIUM_URL=0.0.0.0:4444/wd/hub"
    selenium_testing="tests/test_selenium.py"
  else
    warn_couldnt test Selenium
  fi
fi

# functional testing
emptypat='^ *$'
if [[ "$sqlite_testing $pgsql_testing $ldap_testing $selenium_testing" =~ $emptypat ]]
then
  fail_to test anything.
fi
sh -c "$env pytest $pytest_opts $sqlite_testing $pgsql_testing $ldap_testing $selenium_testing || exit 1"
