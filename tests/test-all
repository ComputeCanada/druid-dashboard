#!/bin/sh
# Git apparently always sets the working directory to the root of the
# workspace, so using relative paths from there is fine.

# --------------------------------------------------------------------------
#                                                            configuration
# --------------------------------------------------------------------------

# this needs to be set when the seed data is changed as this will break
# schema upgrade testing.  This tag must be applied to the commit of the
# changes or that of the seed data, whichever is latest.  Obviously upgrades
# prior to the baseline are assumed to have been properly tested.
SCHEMA_BASELINE=20210309

# --------------------------------------------------------------------------
#                                                            functions
# --------------------------------------------------------------------------

fail_to()
{
  echo Unable to $@
  exit 1
}

# --------------------------------------------------------------------------
#                                                         argument parsing
# --------------------------------------------------------------------------

# get arguments
test_schema=0
linting=1
exitfirst=0
verbose=0
debug=0
sqlite=1
while [ -n "$1" ]
do
  case "$1" in
    --schema)
      test_schema=1
      ;;
    --no-sqlite)
      sqlite=0
      ;;
    --no-linting)
      linting=0
      ;;
    -d|--debug)
      debug=1
      ;;
    -v|--verbose)
      verbose=1
      ;;
    -x|--exitfirst)
      exitfirst=1
      ;;
    *)
      echo "Unrecognized option: $1"
      echo "$(basename $0) [--schema] [--no-sqlite] [--no-linting] [-x|--exitfirst] [-v|--verbose]"
      exit 1
  esac
  shift
done

pytest_opts="--cov=manager --cov-report=term --cov-report=html"
if (( debug ))
then
  pytest_opts="$pytest_opts --log-level=debug"
fi
if (( verbose ))
then
  pytest_opts="$pytest_opts -v"
fi
if (( exitfirst ))
then
  pytest_opts="$pytest_opts -x"
fi

# --------------------------------------------------------------------------
#                                                     actually doing stuff
# --------------------------------------------------------------------------

if (( test_schema ))
then
  # create temporary directory for this stuff
  tmpdir=$(mktemp -d /tmp/$(basename $0).XXXXXX) || fail_to create temporary directory

  # get schema versions from git after $SCHEMA_BASELINE (when seed data changed)
  versions=$(git tag | awk -F- '$1 == "schema" && $2 > '$SCHEMA_BASELINE' { print $2 }' | sort)
  if [ -z "$versions" ]
  then
    test_schema=0
  else
    # grab base schema versions and create databases with them
    for version in $versions
    do
      git show schema-$version:manager/sql/schema.sql > $tmpdir/schema-$version.sql
      git show schema-$version:manager/sql/schema.psql > $tmpdir/schema-$version.psql
      git show schema-$version:tests/data.sql > $tmpdir/seed-$version.sql
    done

    # setup pytest stuff
    export SCHEMA_BASEDIR=$tmpdir
    export SCHEMA_VERSIONS=$(echo $versions | tr ' ' ',') 
  fi
fi

cleanup()
{
  if (( test_schema ))
  then
    rm -Rf $tmpdir
  fi
}
trap cleanup EXIT

export PYTHONPATH=.:$PYTHONPATH

# linting
if (( linting ))
then
  tests/linting/test-all || exit 1
fi

# test sqlite if desired
if (( sqlite ))
then
  sqlite_testing="tests/test_sqlite.py"
  if (( test_schema ))
  then
    sqlite_testing="${sqlite_testing} tests/test_sqlite_upgrade.py"
  fi
fi

# test pgsql if container is running
pgsql_testing=""
ldap_testing=""
if docker ps | grep -q postgres-beam
then
  pgsql_testing="tests/test_pgsql.py"
  if (( test_schema ))
  then
    pgsql_testing="${pgsql_testing} tests/test_pgsql_upgrade.py"
  fi

  # test if LDAP container is running
  if docker ps | grep -q ldap-beam
  then
    ldap_testing="tests/test_integration.py"
  fi
fi

# functional testing
pytest $pytest_opts $sqlite_testing $pgsql_testing $ldap_testing || exit 1
