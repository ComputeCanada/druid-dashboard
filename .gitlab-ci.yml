# yamllint
image: dleskecc/tester.py

variables:
  GIT_SUBMODULE_STRATEGY: normal
  PYLINTRC: tests/linting/extras/pylintrc
  PYTHONPATH: ${PYTHONPATH}:.
  #
  # image names
  TEST_IMAGE: "${CI_REGISTRY_IMAGE}:test"
  DEV_IMAGE: "${CI_REGISTRY_IMAGE}:dev"
  PROD_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  SHA_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

stages:
  - pre-test
  - test
  - build
  - pre-deploy
  - deploy

default:
  tags:
    - unprivileged

.code:
  only:
    changes:
      - .gitlab-ci.yml
      - ccldap
      - "i18n/*"
      - "app/**/*"
      - requirements.txt
      - "tests/**/*"
      - deployment/Dockerfile

.integration:
  before_script:
    - docker login -u burst-ci -p "$ldapctnr_pull_token" $CI_REGISTRY
  variables:
    POSTGRES_PASSWORD: supersecretpassword
    BEAM_PGSQL_URI: postgresql://postgres:supersecretpassword@postgres/postgres
    BEAM_LDAP_URI: ldap://ldap
    BEAM_LDAP_SKIP_TLS: 'yes'
  services:
    - name: git.computecanada.ca:4567/dleske/ldap-ctnr
      alias: ldap
    - name: postgres

.build:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "Building image to tag '$IMAGENAME' with build info '$BUILDINFO'"
    - sed -i 's/Built with Flask/'$BUILDINFO'/' app/templates/base.html
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/deployment/Dockerfile --destination $SHA_IMAGE --destination $IMAGENAME
  dependencies:
    - syntax

todos:
  except:
    - main
  allow_failure: true
  stage: pre-test
  script:
    - tests/linting/todos

todos_main:
  only:
    - main
  allow_failure: true
  stage: pre-test
  script:
    - tests/linting/todos && true; todos=$?
    - anybadge --label=todos --value=$todos --value-format=" %d " --file=todos.svg --use-max 1=green 5=yellow 10=orange 20=red
    - test $todos -eq 0
  artifacts:
    # create artifact even when the job fails, which it should if todos > 0
    when: always
    paths: ['todos.svg']

syntax:
  extends: .code
  stage: pre-test
  script:
    - tests/linting/test-all
    - if test -n "$CI_COMMIT_TAG"; then BUILDINFO=$CI_COMMIT_TAG; else BUILDINFO=$(git log -1 --date=format:%Y%m%d --format="%h\/%cd"); fi
    - 'echo "Buildinfo: $BUILDINFO"'
    - echo "BUILDINFO=$BUILDINFO" >> build.env
  artifacts:
    reports:
      dotenv: build.env

unittest:
  extends: .code
  stage: pre-test
  script:
    - apt-get install -y libldap2-dev libsasl2-dev
    - pip3 install -r requirements.txt
    - pybabel compile -d app/translations
    - pytest -v --cov=app tests/test_sqlite.py

integration:
  extends:
    - .code
    - .integration
  stage: test
  script:
    - 'echo hi > /dev/tcp/postgres/5432 || echo "Could not contact Postgres container"'
    - 'echo hi > /dev/tcp/ldap/389 || echo "Could not contact LDAP container"'
    - apt-get install -y libldap2-dev libsasl2-dev
    - pip3 install -r requirements.txt
    - pybabel compile -d app/translations
    - pytest -v --cov=app tests/test_sqlite.py tests/test_pgsql.py tests/test_integration.py

build_test:
  extends:
    - .code
    - .build
  stage: build
  before_script:
    - IMAGENAME=$TEST_IMAGE

build_dev:
  extends:
    - .code
    - .build
  only:
    - main
  except:
    - tags
  stage: pre-deploy
  before_script:
    - IMAGENAME=$DEV_IMAGE

build_release:
  extends:
    - .code
    - .build
  only:
    - tags
  stage: pre-deploy
  before_script:
    - IMAGENAME=$PROD_IMAGE

deploy_development:
  extends: .code
  # failure allowed while Kubernetes down
  allow_failure: true
  #only:
  #  - main
  except:
    - tags
  stage: deploy
  script:
    - kubectl --kubeconfig="$K8S_CONFIG" patch deployment beam-dev -p '{"spec":{"template":{"spec":{"containers":[{"name":"beam","image":"'${SHA_IMAGE}'"}]}}}}'

deploy_release:
  extends: .code
  # failure allowed while Kubernetes down
  allow_failure: true
  only:
    - tags
  stage: deploy
  script:
    - kubectl version
    - kubectl --kubeconfig="$K8S_CONFIG" patch deployment beam -p '{"spec":{"template":{"spec":{"containers":[{"name":"beam","image":"'${PROD_IMAGE}'"}]}}}}'
